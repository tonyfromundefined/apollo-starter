type MetaQueries {
  version: Version!
}

type Mutation {
  sample: SampleMutations!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
}

type Query {
  meta: MetaQueries!
  sample: SampleQueries!
}

type SampleMutations {
  createTask(content: String!): Task!
}

type SampleQueries {
  tasks: TaskConnection!
}

enum Stage {
  Development
  Production
}

type Task {
  id: ID!
  content: String!
}

type TaskConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge {
  node: Task!
  cursor: String!
}

type Version {
  stage: Stage!
  shortHash: String!
  hash: String!
  committedOn: String!
}
